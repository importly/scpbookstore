"""
This type stub file was generated by pyright.
"""

precomputed_qr_blanks = ...
def make(data=..., **kwargs): # -> BaseImage | PilImage:
    ...

def copy_2d_array(x): # -> list[Unknown]:
    ...

class QRCode:
    def __init__(self, version=..., error_correction=..., box_size=..., border=..., image_factory=..., mask_pattern=...) -> None:
        ...
    
    @property
    def mask_pattern(self):
        ...
    
    @mask_pattern.setter
    def mask_pattern(self, pattern): # -> None:
        ...
    
    def clear(self): # -> None:
        """
        Reset the internal data.
        """
        ...
    
    def add_data(self, data, optimize=...): # -> None:
        """
        Add data to this QR Code.

        :param optimize: Data will be split into multiple chunks to optimize
            the QR size by finding to more compressed modes of at least this
            length. Set to ``0`` to avoid optimizing at all.
        """
        ...
    
    def make(self, fit=...): # -> None:
        """
        Compile the data into a QR Code array.

        :param fit: If ``True`` (or if a size has not been provided), find the
            best fit for the data to avoid data overflow errors.
        """
        ...
    
    def makeImpl(self, test, mask_pattern): # -> None:
        ...
    
    def setup_position_probe_pattern(self, row, col): # -> None:
        ...
    
    def best_fit(self, start=...): # -> int:
        """
        Find the minimum size required to fit in the data.
        """
        ...
    
    def best_mask_pattern(self): # -> int:
        """
        Find the most efficient mask pattern.
        """
        ...
    
    def print_tty(self, out=...): # -> None:
        """
        Output the QR Code only using TTY colors.

        If the data has not been compiled yet, make it first.
        """
        ...
    
    def print_ascii(self, out=..., tty=..., invert=...): # -> None:
        """
        Output the QR Code using ASCII characters.

        :param tty: use fixed TTY color codes (forces invert=True)
        :param invert: invert the ASCII characters (solid <-> transparent)
        """
        ...
    
    def make_image(self, image_factory=..., **kwargs): # -> BaseImage | PilImage:
        """
        Make an image from the QR Code data.

        If the data has not been compiled yet, make it first.
        """
        ...
    
    def is_constrained(self, row, col):
        ...
    
    def get_module_context(self, row, col): # -> list[Unknown]:
        ...
    
    def setup_timing_pattern(self): # -> None:
        ...
    
    def setup_position_adjust_pattern(self): # -> None:
        ...
    
    def setup_type_number(self, test): # -> None:
        ...
    
    def setup_type_info(self, test, mask_pattern): # -> None:
        ...
    
    def map_data(self, data, mask_pattern): # -> None:
        ...
    
    def get_matrix(self): # -> list[Unknown] | list[list[bool]] | None:
        """
        Return the QR Code as a multidimensional array, including the border.

        To return the array without a border, set ``self.border`` to 0 first.
        """
        ...
    


